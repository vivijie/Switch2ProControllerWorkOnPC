import pygame
import time
import threading
import math
from collections import deque
from vgamepad import VX360Gamepad, XUSB_BUTTON

# ==================== 配置区域 ====================
# 一致性模式配置 (global_min: 全局最小范围统一缩放, independent: 传统独立缩放)
CONSISTENCY_MODE = {
    'left': 'global_min',   # 左摇杆使用一致性模式
    'right': 'global_min'   # 右摇杆使用一致性模式
}

# 默认摇杆物理限制校准（防呆设计，使用0.8作为安全值）
DEFAULT_PHYSICAL_LIMITS = {
    'left': {'min_x': -0.8, 'max_x': 0.8, 'min_y': -0.8, 'max_y': 0.8},
    'right': {'min_x': -0.8, 'max_x': 0.8, 'min_y': -0.8, 'max_y': 0.8}
}

# 默认摇杆中心偏移校准
DEFAULT_CENTER_OFFSETS = {
    'left': {'x': 0.0, 'y': 0.0},
    'right': {'x': 0.0, 'y': 0.0}
}

# 独立死区配置 - 左右摇杆分别设置
DEADZONE_CONFIG = {
    'left': {
        'deadzone': 0.03,
        'outer_threshold': 1.0,
        'response_curve': 1.0
    },
    'right': {
        'deadzone': 0.00, 
        'outer_threshold': 1.0,
        'response_curve': 1.0
    }
}

# 摇杆输出增幅配置 (1.0=无增幅, 1.1=10%增幅, 0.9=10%衰减)
OUTPUT_AMPLIFIER = {
    'left_stick': 1.0,   # 左摇杆输出增幅
    'right_stick': 1.0    # 右摇杆输出增幅
}

# 方形死区开关配置 (0=关闭, 1=开启)
SQUARE_DEADZONE_SWITCH = {
    'left_stick': 1,   # 左摇杆方形死区开关
    'right_stick': 1   # 右摇杆方形死区开关
}

# 方形映射强度配置 (0.0=纯圆, 1.0=纯方, 中间值=混合)
SQUARE_MAPPING_STRENGTH = {
    'left_stick': 0.5,   # 左摇杆方形映射强度
    'right_stick': 0.5   # 右摇杆方形映射强度
}

# 更新率配置
UPDATE_RATE = 2000  # Hz

# 按钮映射
PHYSICAL_TO_NAME = {
    0: "A", 1: "B", 2: "X", 3: "Y",
    4: "R", 5: "ZR", 6: "Plus", 7: "RStick",
    8: "Down", 9: "Right", 10: "Left", 11: "Up",
    12: "L", 13: "ZL", 14: "Min", 15: "LStick",
    16: "Home", 17: "Capture",
    18: "BR", 19: "BL",
    20: "C"
}

NAME_TO_XBOX = {
    "BR": XUSB_BUTTON.XUSB_GAMEPAD_B,
    "BL": XUSB_BUTTON.XUSB_GAMEPAD_A,
    "A": XUSB_BUTTON.XUSB_GAMEPAD_A,
    "B": XUSB_BUTTON.XUSB_GAMEPAD_B,
    "X": XUSB_BUTTON.XUSB_GAMEPAD_X,
    "Y": XUSB_BUTTON.XUSB_GAMEPAD_Y,
    "L": XUSB_BUTTON.XUSB_GAMEPAD_LEFT_SHOULDER,
    "R": XUSB_BUTTON.XUSB_GAMEPAD_RIGHT_SHOULDER,
    "Min": XUSB_BUTTON.XUSB_GAMEPAD_BACK,
    "Plus": XUSB_BUTTON.XUSB_GAMEPAD_START,
    "Home": XUSB_BUTTON.XUSB_GAMEPAD_START,
    "Capture": XUSB_BUTTON.XUSB_GAMEPAD_BACK,
    "LStick": XUSB_BUTTON.XUSB_GAMEPAD_LEFT_THUMB,
    "RStick": XUSB_BUTTON.XUSB_GAMEPAD_RIGHT_THUMB,
    "Up": XUSB_BUTTON.XUSB_GAMEPAD_DPAD_UP,
    "Down": XUSB_BUTTON.XUSB_GAMEPAD_DPAD_DOWN,
    "Left": XUSB_BUTTON.XUSB_GAMEPAD_DPAD_LEFT,
    "Right": XUSB_BUTTON.XUSB_GAMEPAD_DPAD_RIGHT,
    "ZL": "left_trigger",
    "ZR": "right_trigger"
}

# 特殊按键配置 - 修改为统一使用keys列表
SPECIAL_BUTTONS = {
    17: {'keys': ['t'], 'description': 'Capture按钮映射为键盘T键'},
    20: {'keys': ['alt', 'f10'], 'description': 'Home按钮映射为Alt+F10组合键'}
}

# ==================== 初始化 ====================
pygame.init()
pygame.joystick.init()
virtual_gamepad = VX360Gamepad()

joystick_count = pygame.joystick.get_count()
if joystick_count == 0:
    print("未检测到手柄!")
    exit()

joystick = pygame.joystick.Joystick(0)
joystick.init()

print(f"检测到手柄: {joystick.get_name()}")
print("按钮数量:", joystick.get_numbuttons())
print("按 Ctrl+C 退出")

# 创建物理到XBOX的映射
PHYSICAL_TO_XBOX = {}
for physical_idx, button_name in PHYSICAL_TO_NAME.items():
    if button_name in NAME_TO_XBOX:
        PHYSICAL_TO_XBOX[physical_idx] = NAME_TO_XBOX[button_name]

# 按钮状态数组
button_states = [False] * 25
trigger_states = {'left': 0.0, 'right': 0.0}

# ==================== 修正的摇杆范围自动识别函数 ====================
def calibrate_joystick_range_and_center():
    """修正的摇杆校准：先校准中心点，再计算校准后的实际范围"""
    print("\n" + "="*80)
    print("🎮 修正版摇杆范围与中心偏移自动识别".center(80))
    print("="*80)
    print("第一步: 请将左右摇杆保持在中心位置，不要触碰")
    print("第二步: 10秒后开始范围校准，请同时转动左右摇杆3圈，覆盖所有方向")
    print("="*80)
    
    # 初始化范围数据（存储原始物理范围）
    raw_physical_limits = {
        'left': {'min_x': 0.0, 'max_x': 0.0, 'min_y': 0.0, 'max_y': 0.0},
        'right': {'min_x': 0.0, 'max_x': 0.0, 'min_y': 0.0, 'max_y': 0.0}
    }
    
    # 初始化校准后的范围数据（应用中心偏移后的实际范围）
    calibrated_physical_limits = {
        'left': {'min_x': 0.0, 'max_x': 0.0, 'min_y': 0.0, 'max_y': 0.0},
        'right': {'min_x': 0.0, 'max_x': 0.0, 'min_y': 0.0, 'max_y': 0.0}
    }
    
    # 初始化中心偏移数据
    center_offsets = {
        'left': {'x': 0.0, 'y': 0.0},
        'right': {'x': 0.0, 'y': 0.0}
    }
    
    # 检查摇杆数量
    if joystick.get_numaxes() < 4:
        print("错误: 摇杆轴数量不足，使用默认范围")
        return DEFAULT_PHYSICAL_LIMITS, DEFAULT_CENTER_OFFSETS
    
    # ==================== 第一步: 检测中心偏移 ====================
    print("\n📊 正在检测摇杆中心偏移...")
    print("请确保左右摇杆都保持在中心位置，不要触碰")
    time.sleep(3)  # 等待3秒让用户准备
    
    center_samples = {'left': {'x': [], 'y': []}, 'right': {'x': [], 'y': []}}
    sample_count = 100
    sample_interval = 0.01
    
    for i in range(sample_count):
        pygame.event.pump()
        
        try:
            # 读取摇杆原始数据
            left_x = joystick.get_axis(0)
            left_y = joystick.get_axis(1)
            right_x = joystick.get_axis(2)
            right_y = joystick.get_axis(3)
            
            # 收集样本
            center_samples['left']['x'].append(left_x)
            center_samples['left']['y'].append(left_y)
            center_samples['right']['x'].append(right_x)
            center_samples['right']['y'].append(right_y)
            
            # 显示进度
            progress = (i + 1) / sample_count * 100
            print(f"\r采集中心样本: {progress:.0f}%", end="", flush=True)
            
            time.sleep(sample_interval)
            
        except Exception as e:
            print(f"\n采集中心样本错误: {e}")
    
    # 计算中心偏移（平均值）
    for stick in ['left', 'right']:
        center_offsets[stick]['x'] = sum(center_samples[stick]['x']) / sample_count
        center_offsets[stick]['y'] = sum(center_samples[stick]['y']) / sample_count
    
    print(f"\n\n✅ 中心偏移检测完成!")
    print(f"左摇杆中心偏移: X={center_offsets['left']['x']:+.4f}, Y={center_offsets['left']['y']:+.4f}")
    print(f"右摇杆中心偏移: X={center_offsets['right']['x']:+.4f}, Y={center_offsets['right']['y']:+.4f}")
    
    # ==================== 第二步: 检测物理范围（应用中心偏移前） ====================
    print("\n🔄 正在校准摇杆物理范围...")
    print("请同时转动左右摇杆3圈，覆盖所有方向")
    time.sleep(2)  # 等待2秒
    
    # 使用原始值初始化范围（不应用中心偏移）
    try:
        pygame.event.pump()
        # 读取原始值（不应用中心偏移）
        left_x = joystick.get_axis(0)
        left_y = joystick.get_axis(1)
        right_x = joystick.get_axis(2)
        right_y = joystick.get_axis(3)
        
        raw_physical_limits['left']['min_x'] = raw_physical_limits['left']['max_x'] = left_x
        raw_physical_limits['left']['min_y'] = raw_physical_limits['left']['max_y'] = left_y
        raw_physical_limits['right']['min_x'] = raw_physical_limits['right']['max_x'] = right_x
        raw_physical_limits['right']['min_y'] = raw_physical_limits['right']['max_y'] = right_y
        
        # 同时初始化校准后的范围（应用中心偏移）
        calibrated_left_x = left_x - center_offsets['left']['x']
        calibrated_left_y = left_y - center_offsets['left']['y']
        calibrated_right_x = right_x - center_offsets['right']['x']
        calibrated_right_y = right_y - center_offsets['right']['y']
        
        calibrated_physical_limits['left']['min_x'] = calibrated_physical_limits['left']['max_x'] = calibrated_left_x
        calibrated_physical_limits['left']['min_y'] = calibrated_physical_limits['left']['max_y'] = calibrated_left_y
        calibrated_physical_limits['right']['min_x'] = calibrated_physical_limits['right']['max_x'] = calibrated_right_x
        calibrated_physical_limits['right']['min_y'] = calibrated_physical_limits['right']['max_y'] = calibrated_right_y
        
    except:
        print("初始化读取失败，使用默认范围")
        return DEFAULT_PHYSICAL_LIMITS, center_offsets
    
    start_time = time.time()
    calibration_time = 6  # 校准时间6秒
    
    while time.time() - start_time < calibration_time:
        pygame.event.pump()
        
        try:
            # 读取原始数据（不应用中心偏移）
            left_x = joystick.get_axis(0)
            left_y = joystick.get_axis(1)
            right_x = joystick.get_axis(2)
            right_y = joystick.get_axis(3)
            
            # 更新原始物理范围
            raw_physical_limits['left']['min_x'] = min(raw_physical_limits['left']['min_x'], left_x)
            raw_physical_limits['left']['max_x'] = max(raw_physical_limits['left']['max_x'], left_x)
            raw_physical_limits['left']['min_y'] = min(raw_physical_limits['left']['min_y'], left_y)
            raw_physical_limits['left']['max_y'] = max(raw_physical_limits['left']['max_y'], left_y)
            
            raw_physical_limits['right']['min_x'] = min(raw_physical_limits['right']['min_x'], right_x)
            raw_physical_limits['right']['max_x'] = max(raw_physical_limits['right']['max_x'], right_x)
            raw_physical_limits['right']['min_y'] = min(raw_physical_limits['right']['min_y'], right_y)
            raw_physical_limits['right']['max_y'] = max(raw_physical_limits['right']['max_y'], right_y)
            
            # 同时更新校准后的范围（应用中心偏移）
            calibrated_left_x = left_x - center_offsets['left']['x']
            calibrated_left_y = left_y - center_offsets['left']['y']
            calibrated_right_x = right_x - center_offsets['right']['x']
            calibrated_right_y = right_y - center_offsets['right']['y']
            
            calibrated_physical_limits['left']['min_x'] = min(calibrated_physical_limits['left']['min_x'], calibrated_left_x)
            calibrated_physical_limits['left']['max_x'] = max(calibrated_physical_limits['left']['max_x'], calibrated_left_x)
            calibrated_physical_limits['left']['min_y'] = min(calibrated_physical_limits['left']['min_y'], calibrated_left_y)
            calibrated_physical_limits['left']['max_y'] = max(calibrated_physical_limits['left']['max_y'], calibrated_left_y)
            
            calibrated_physical_limits['right']['min_x'] = min(calibrated_physical_limits['right']['min_x'], calibrated_right_x)
            calibrated_physical_limits['right']['max_x'] = max(calibrated_physical_limits['right']['max_x'], calibrated_right_x)
            calibrated_physical_limits['right']['min_y'] = min(calibrated_physical_limits['right']['min_y'], calibrated_right_y)
            calibrated_physical_limits['right']['max_y'] = max(calibrated_physical_limits['right']['max_y'], calibrated_right_y)
            
            # 显示当前进度（显示校准后的范围）
            remaining_time = calibration_time - (time.time() - start_time)
            print(f"\r校准中... {remaining_time:.1f}秒 左:[X{calibrated_physical_limits['left']['min_x']:+.3f}↔{calibrated_physical_limits['left']['max_x']:+.3f} Y{calibrated_physical_limits['left']['min_y']:+.3f}↔{calibrated_physical_limits['left']['max_y']:+.3f}] 右:[X{calibrated_physical_limits['right']['min_x']:+.3f}↔{calibrated_physical_limits['right']['max_x']:+.3f} Y{calibrated_physical_limits['right']['min_y']:+.3f}↔{calibrated_physical_limits['right']['max_y']:+.3f}]", 
                  end="", flush=True)
            
            time.sleep(0.01)
            
        except Exception as e:
            print(f"\n校准错误: {e}")
            break
    
    # 验证校准结果的有效性
    for stick in ['left', 'right']:
        raw_limits = raw_physical_limits[stick]
        calibrated_limits = calibrated_physical_limits[stick]
        
        # 检查是否读取到了有效数据
        if (abs(calibrated_limits['min_x']) < 0.01 and abs(calibrated_limits['max_x']) < 0.01 and
            abs(calibrated_limits['min_y']) < 0.01 and abs(calibrated_limits['max_y']) < 0.01):
            print(f"\n⚠️  {stick}摇杆未检测到有效移动，使用默认范围")
            calibrated_physical_limits[stick] = DEFAULT_PHYSICAL_LIMITS[stick].copy()
        else:
            # 确保最小值确实小于最大值
            if calibrated_limits['min_x'] > calibrated_limits['max_x']:
                calibrated_limits['min_x'], calibrated_limits['max_x'] = calibrated_limits['max_x'], calibrated_limits['min_x']
            if calibrated_limits['min_y'] > calibrated_limits['max_y']:
                calibrated_limits['min_y'], calibrated_limits['max_y'] = calibrated_limits['max_y'], calibrated_limits['min_y']
    
    print("\n\n✅ 摇杆校准完成!")
    
    # 显示最终校准结果（对比原始和校准后的范围）
    print("\n" + "="*80)
    print("🎯 校准结果对比".center(80))
    print("="*80)
    for stick in ['left', 'right']:
        stick_name = "左摇杆" if stick == 'left' else "右摇杆"
        raw_limits = raw_physical_limits[stick]
        calibrated_limits = calibrated_physical_limits[stick]
        offset = center_offsets[stick]
        
        print(f"{stick_name}:")
        print(f"  原始范围:   X[{raw_limits['min_x']:+.3f} ↔ {raw_limits['max_x']:+.3f}] Y[{raw_limits['min_y']:+.3f} ↔ {raw_limits['max_y']:+.3f}]")
        print(f"  校准后范围: X[{calibrated_limits['min_x']:+.3f} ↔ {calibrated_limits['max_x']:+.3f}] Y[{calibrated_limits['min_y']:+.3f} ↔ {calibrated_limits['max_y']:+.3f}]")
        print(f"  中心偏移:   X={offset['x']:+.4f}, Y={offset['y']:+.4f}")
    print("="*80)
    
    return calibrated_physical_limits, center_offsets

# ==================== 修正的一致性优先摇杆优化器 ====================
class CorrectedConsistentJoystickOptimizer:
    def __init__(self, calibrated_physical_limits, center_offsets, consistency_mode):
        """
        修正的优化器：使用校准后的物理范围进行计算
        calibrated_physical_limits: 已经应用中心偏移校正后的物理范围
        center_offsets: 中心偏移值
        consistency_mode: 一致性模式配置
        """
        self.calibrated_physical_limits = calibrated_physical_limits
        self.center_offsets = center_offsets
        self.consistency_mode = consistency_mode
        self._calculate_corrected_scaling_factors()
        
    def _calculate_corrected_scaling_factors(self):
        """计算修正的缩放因子：基于校准后的范围"""
        for stick_type in ['left', 'right']:
            calibrated_limits = self.calibrated_physical_limits[stick_type]
            mode = self.consistency_mode[stick_type]
            
            if mode == 'global_min':
                # 使用校准后的范围计算四个方向的最小值
                # 校准后的范围已经是相对于中心点的实际移动距离
                min_positive_x = abs(calibrated_limits['max_x'])  # 右方向实际范围
                min_negative_x = abs(calibrated_limits['min_x'])  # 左方向实际范围
                min_positive_y = abs(calibrated_limits['max_y'])  # 上方向实际范围
                min_negative_y = abs(calibrated_limits['min_y'])  # 下方向实际范围
                
                # 取四个方向的最小值作为统一缩放基准
                global_min_range = min(min_positive_x, min_negative_x, 
                                     min_positive_y, min_negative_y)
                
                # 避免除零错误
                if global_min_range < 0.01:
                    global_min_range = 0.8  # 默认安全值
                
                # 存储缩放因子
                calibrated_limits['global_scale'] = 1.0 / global_min_range
                calibrated_limits['consistency_mode'] = 'global_min'
                
                # 计算外部死区百分比（基于校准后的范围）
                self._calculate_corrected_external_deadzone(stick_type, global_min_range)
                
                print(f"🎯 {stick_type}摇杆修正一致性模式:")
                print(f"  校准后范围: X[{calibrated_limits['min_x']:+.3f}↔{calibrated_limits['max_x']:+.3f}] Y[{calibrated_limits['min_y']:+.3f}↔{calibrated_limits['max_y']:+.3f}]")
                print(f"  统一缩放因子: {1.0/global_min_range:.3f}x (基准: {global_min_range:.3f})")
                
            else:
                # 传统模式：每个方向独立缩放（基于校准后的范围）
                calibrated_limits['x_positive_scale'] = 1.0 / calibrated_limits['max_x'] if abs(calibrated_limits['max_x']) > 0.01 else 1.0
                calibrated_limits['x_negative_scale'] = 1.0 / abs(calibrated_limits['min_x']) if abs(calibrated_limits['min_x']) > 0.01 else 1.0
                calibrated_limits['y_positive_scale'] = 1.0 / calibrated_limits['max_y'] if abs(calibrated_limits['max_y']) > 0.01 else 1.0
                calibrated_limits['y_negative_scale'] = 1.0 / abs(calibrated_limits['min_y']) if abs(calibrated_limits['min_y']) > 0.01 else 1.0
                calibrated_limits['consistency_mode'] = 'independent'
                
                print(f"⚙️  {stick_type}摇杆传统模式: 基于校准后范围的独立方向缩放")
    
    def _calculate_corrected_external_deadzone(self, stick_type, global_min_range):
        """计算修正的外部死区：基于校准后的范围"""
        calibrated_limits = self.calibrated_physical_limits[stick_type]
        
        deadzones = {
            'up': max(0, (calibrated_limits['max_y'] - global_min_range) / calibrated_limits['max_y'] * 100) if calibrated_limits['max_y'] > global_min_range else 0,
            'down': max(0, (abs(calibrated_limits['min_y']) - global_min_range) / abs(calibrated_limits['min_y']) * 100) if abs(calibrated_limits['min_y']) > global_min_range else 0,
            'left': max(0, (abs(calibrated_limits['min_x']) - global_min_range) / abs(calibrated_limits['min_x']) * 100) if abs(calibrated_limits['min_x']) > global_min_range else 0,
            'right': max(0, (calibrated_limits['max_x'] - global_min_range) / calibrated_limits['max_x'] * 100) if calibrated_limits['max_x'] > global_min_range else 0
        }
        
        calibrated_limits['external_deadzone'] = deadzones
        
        # 打印外部死区信息
        deadzone_info = []
        for direction, percentage in deadzones.items():
            if percentage > 0:
                deadzone_info.append(f"{direction}{percentage:.1f}%")
        
        if deadzone_info:
            print(f"  外部死区: {', '.join(deadzone_info)}")
        else:
            print("  外部死区: 无")
        
        # 显示对称性信息
        x_symmetry = abs(abs(calibrated_limits['min_x']) - abs(calibrated_limits['max_x'])) / max(abs(calibrated_limits['min_x']), abs(calibrated_limits['max_x'])) * 100
        y_symmetry = abs(abs(calibrated_limits['min_y']) - abs(calibrated_limits['max_y'])) / max(abs(calibrated_limits['min_y']), abs(calibrated_limits['max_y'])) * 100
        print(f"  对称性: X轴{x_symmetry:.1f}% Y轴{y_symmetry:.1f}%")

    def apply_center_offset_correction(self, raw_value, stick_type, axis_type):
        """应用中心偏移校正"""
        offset = self.center_offsets[stick_type][axis_type]
        return raw_value - offset
        
    def normalize_joystick_value(self, raw_value, axis_type, stick_type):
        """修正的归一化：基于校准后的范围进行计算"""
        # 首先应用中心偏移校正
        corrected_value = self.apply_center_offset_correction(
            raw_value, stick_type, 'x' if axis_type == 'x' else 'y')
        
        calibrated_limits = self.calibrated_physical_limits[stick_type]
        mode = calibrated_limits.get('consistency_mode', 'global_min')
        
        if mode == 'global_min':
            # 一致性模式：使用基于校准后范围的统一缩放因子
            scale_factor = calibrated_limits['global_scale']
            normalized = corrected_value * scale_factor
        else:
            # 传统模式：基于校准后范围的独立缩放
            if axis_type == 'x':
                if corrected_value < 0:
                    scale_factor = calibrated_limits['x_negative_scale']
                else:
                    scale_factor = calibrated_limits['x_positive_scale']
            else:  # y轴
                if corrected_value < 0:
                    scale_factor = calibrated_limits['y_negative_scale']
                else:
                    scale_factor = calibrated_limits['y_positive_scale']
            
            normalized = corrected_value * scale_factor
        
        # 限制在[-1, 1]范围内，超出部分作为外部死区
        return max(-1.0, min(1.0, normalized))
    
    def get_consistency_info(self, stick_type):
        """获取一致性信息"""
        calibrated_limits = self.calibrated_physical_limits[stick_type]
        mode = calibrated_limits.get('consistency_mode', 'global_min')
        
        info = {
            'mode': mode,
            'calibrated_range': {
                'x': [calibrated_limits['min_x'], calibrated_limits['max_x']],
                'y': [calibrated_limits['min_y'], calibrated_limits['max_y']]
            }
        }
        
        if mode == 'global_min':
            info['global_scale'] = calibrated_limits.get('global_scale', 1.0)
            info['external_deadzone'] = calibrated_limits.get('external_deadzone', {})
        
        return info

# ==================== 死区处理类 ====================
class AdvancedDeadzone:
    def __init__(self, deadzone_config):
        self.deadzone_config = deadzone_config
    
    def apply_square_deadzone(self, x, y, stick_type):
        """方形死区处理 - 独立控制"""
        config = self.deadzone_config[stick_type]
        deadzone = config['deadzone']
        outer_threshold = config['outer_threshold']
        response_curve = config['response_curve']
        
        # 计算最大绝对值（方形区域的关键）
        max_abs = max(abs(x), abs(y))
        
        # 如果最大绝对值小于死区，返回0（在死区内）
        if max_abs < deadzone:
            return 0.0, 0.0

        # 第一步：应用方形形状（先保持完整方形）
        if max_abs > 0:
            # 计算缩放比例 - 保持方形形状
            if abs(x) > 0.0001 or abs(y) > 0.0001:
                if abs(x) > abs(y):
                    scale = 1.0 / abs(x)
                    new_x = math.copysign(1.0, x)
                    new_y = y * scale
                else:
                    scale = 1.0 / abs(y)
                    new_x = x * scale
                    new_y = math.copysign(1.0, y)
                
                new_x = max(-1.0, min(1.0, new_x))
                new_y = max(-1.0, min(1.0, new_y))
                
                # 第二步：应用响应曲线和范围限制
                if response_curve != 1.0:
                    normalized = (max_abs - deadzone) / (1.0 - deadzone)
                    scaled_magnitude = normalized ** response_curve
                    final_scale = scaled_magnitude
                else:
                    final_scale = (max_abs - deadzone) / (1.0 - deadzone)
                
                final_scale = min(final_scale, outer_threshold)
                
                new_x *= final_scale
                new_y *= final_scale
                
                return new_x, new_y
        
        return x, y

    def apply_circular_deadzone(self, x, y, stick_type):
        """圆形死区处理 - 独立控制"""
        config = self.deadzone_config[stick_type]
        deadzone = config['deadzone']
        outer_threshold = config['outer_threshold']
        response_curve = config['response_curve']
        
        magnitude = (x**2 + y**2) ** 0.5

        if magnitude < deadzone:
            return 0.0, 0.0

        # 应用响应曲线
        if response_curve != 1.0:
            normalized = (magnitude - deadzone) / (1.0 - deadzone)
            scaled_magnitude = normalized ** response_curve
            magnitude = scaled_magnitude * (1.0 - deadzone) + deadzone

        # 限制最大输出
        magnitude = min(magnitude, outer_threshold)

        # 保持方向，应用缩放后的幅度
        if magnitude > 0:
            current_magnitude = (x**2 + y**2) ** 0.5
            if current_magnitude > 0.0001:
                scale = magnitude / current_magnitude
                return x * scale, y * scale
            else:
                return x, y

# ==================== 方形映射处理函数 ====================
def apply_square_mapping(x, y, strength):
    """
    将圆形摇杆输出转换为方形输出，支持强度调节
    强度为0.0时：纯圆形输出
    强度为1.0时：纯方形输出
    中间值：圆形和方形的混合
    """
    if x == 0 and y == 0:
        return 0.0, 0.0
    
    # 如果强度为0，直接返回原始值（纯圆形）
    if strength == 0.0:
        return x, y
    
    # 计算当前点的角度和幅度
    angle = math.atan2(y, x)
    magnitude = math.sqrt(x*x + y*y)
    
    # 计算方形映射后的最大可能幅度
    abs_cos = abs(math.cos(angle))
    abs_sin = abs(math.sin(angle))
    
    if abs_cos > abs_sin:
        scale = 1.0 / abs_cos
    else:
        scale = 1.0 / abs_sin
    
    # 计算纯方形映射后的坐标
    square_x = x * scale
    square_y = y * scale
    
    # 确保方形映射后的值在[-1, 1]范围内
    square_x = max(-1.0, min(1.0, square_x))
    square_y = max(-1.0, min(1.0, square_y))
    
    # 如果强度为1，直接返回纯方形映射结果
    if strength == 1.0:
        return square_x, square_y
    
    # 强度在0和1之间时，进行线性插值
    circular_weight = 1.0 - strength
    square_weight = strength
    
    # 线性插值
    result_x = x * circular_weight + square_x * square_weight
    result_y = y * circular_weight + square_y * square_weight
    
    # 确保结果在[-1, 1]范围内
    result_x = max(-1.0, min(1.0, result_x))
    result_y = max(-1.0, min(1.0, result_y))
    
    return result_x, result_y

# ==================== 输出增幅处理函数 ====================
def apply_output_amplifier(x, y, stick_type):
    """应用摇杆输出增幅"""
    amplifier = OUTPUT_AMPLIFIER[stick_type]
    
    if amplifier != 1.0:
        new_x = x * amplifier
        new_y = y * amplifier
        
        new_x = max(-1.0, min(1.0, new_x))
        new_y = max(-1.0, min(1.0, new_y))
        
        return new_x, new_y
    
    return x, y

# ==================== 配置信息打印函数 ====================
def print_configuration_info(joystick_optimizer):
    """打印详细的配置信息"""
    print("\n" + "="*80)
    print("🎮 修正版一致性优先摇杆配置信息".center(80))
    print("="*80)
    
    for stick in ['left', 'right']:
        stick_name = "左摇杆" if stick == 'left' else "右摇杆"
        info = joystick_optimizer.get_consistency_info(stick)
        
        print(f"\n{stick_name} - 模式: {'一致性优先(global_min)' if info['mode'] == 'global_min' else '传统独立(independent)'}")
        
        # 显示校准后的范围
        calibrated_range = info['calibrated_range']
        print(f"  校准后范围: X[{calibrated_range['x'][0]:+.3f} ↔ {calibrated_range['x'][1]:+.3f}] Y[{calibrated_range['y'][0]:+.3f} ↔ {calibrated_range['y'][1]:+.3f}]")
        
        if info['mode'] == 'global_min':
            # 显示一致性模式详细信息
            scale = info.get('global_scale', 1.0)
            deadzones = info.get('external_deadzone', {})
            
            print(f"  统一缩放: {scale:.3f}x")
            print(f"  外部死区: 上{deadzones.get('up', 0):.1f}% 下{deadzones.get('down', 0):.1f}% "
                  f"左{deadzones.get('left', 0):.1f}% 右{deadzones.get('right', 0):.1f}%")
            
            # 显示对称性优势
            x_range = calibrated_range['x']
            y_range = calibrated_range['y']
            x_symmetry = abs(abs(x_range[0]) - abs(x_range[1])) / max(abs(x_range[0]), abs(x_range[1])) * 100
            y_symmetry = abs(abs(y_range[0]) - abs(y_range[1])) / max(abs(y_range[0]), abs(y_range[1])) * 100
            
            print(f"  对称性: X轴{x_symmetry:.1f}% Y轴{y_symmetry:.1f}%")
            print("  ✅ 优势: 物理行程一致性 ✓ 完美对称性 ✓ 肌肉记忆友好 ✓")
        else:
            print("  ⚠️ 注意: 传统模式可能导致方向灵敏度不一致")
    
    print("="*80)

# ==================== 主程序 ====================
# 使用修正的校准函数识别摇杆范围和中心偏移
JOYSTICK_PHYSICAL_LIMITS, CENTER_OFFSETS = calibrate_joystick_range_and_center()

# 初始化修正的一致性优先优化器
joystick_optimizer = CorrectedConsistentJoystickOptimizer(
    JOYSTICK_PHYSICAL_LIMITS, 
    CENTER_OFFSETS, 
    CONSISTENCY_MODE
)

# 初始化其他处理器
deadzone_processor = AdvancedDeadzone(DEADZONE_CONFIG)

# 摇杆数据缓存
stick_data_cache = {
    'left': {'x': 0.0, 'y': 0.0},
    'right': {'x': 0.0, 'y': 0.0}
}

# 高精度定时器
last_update_time = time.perf_counter()
update_interval = 1.0 / UPDATE_RATE

# ==================== 处理函数 ====================
def process_joysticks_optimized(joystick):
    """优化的摇杆处理，包含修正的一致性优先映射"""
    global stick_data_cache

    if joystick.get_numaxes() < 4:
        return

    try:
        # 读取原始摇杆数据
        left_x = joystick.get_axis(0)
        left_y = joystick.get_axis(1)
        right_x = joystick.get_axis(2)
        right_y = joystick.get_axis(3)

        # 应用修正的一致性优先归一化
        left_x = joystick_optimizer.normalize_joystick_value(left_x, 'x', 'left')
        left_y = joystick_optimizer.normalize_joystick_value(left_y, 'y', 'left')
        right_x = joystick_optimizer.normalize_joystick_value(right_x, 'x', 'right')
        right_y = joystick_optimizer.normalize_joystick_value(right_y, 'y', 'right')

        # 应用方形映射
        left_strength = SQUARE_MAPPING_STRENGTH['left_stick']
        right_strength = SQUARE_MAPPING_STRENGTH['right_stick']
        
        if left_strength > 0.0:
            left_x, left_y = apply_square_mapping(left_x, left_y, left_strength)
        if right_strength > 0.0:
            right_x, right_y = apply_square_mapping(right_x, right_y, right_strength)

        # 应用死区算法
        if SQUARE_DEADZONE_SWITCH['left_stick']:
            left_x, left_y = deadzone_processor.apply_square_deadzone(left_x, left_y, 'left')
        else:
            left_x, left_y = deadzone_processor.apply_circular_deadzone(left_x, left_y, 'left')
            
        if SQUARE_DEADZONE_SWITCH['right_stick']:
            right_x, right_y = deadzone_processor.apply_square_deadzone(right_x, right_y, 'right')
        else:
            right_x, right_y = deadzone_processor.apply_circular_deadzone(right_x, right_y, 'right')

        # 应用输出增幅
        left_x, left_y = apply_output_amplifier(left_x, left_y, 'left_stick')
        right_x, right_y = apply_output_amplifier(right_x, right_y, 'right_stick')

        # 更新缓存
        stick_data_cache['left']['x'] = left_x
        stick_data_cache['left']['y'] = left_y
        stick_data_cache['right']['x'] = right_x
        stick_data_cache['right']['y'] = right_y

    except Exception as e:
        print(f"摇杆读取错误: {e}")

def process_trigger_buttons():
    """处理扳机按钮（按钮5和13）"""
    global trigger_states

    try:
        # 右扳机按钮 (ZR - 按钮5)
        zr_pressed = bool(joystick.get_button(5))
        trigger_states['right'] = 1.0 if zr_pressed else 0.0

        # 左扳机按钮 (ZL - 按钮13)
        zl_pressed = bool(joystick.get_button(13))
        trigger_states['left'] = 1.0 if zl_pressed else 0.0

    except Exception as e:
        print(f"扳机按钮读取错误: {e}")

def update_virtual_gamepad():
    """高速更新虚拟手柄"""
    global last_update_time

    while True:
        current_time = time.perf_counter()
        elapsed = current_time - last_update_time

        if elapsed >= update_interval:
            try:
                # 设置摇杆
                left = stick_data_cache['left']
                right = stick_data_cache['right']

                virtual_gamepad.left_joystick_float(left['x'], left['y'])
                virtual_gamepad.right_joystick_float(right['x'], right['y'])

                # 设置扳机
                virtual_gamepad.left_trigger_float(trigger_states['left'])
                virtual_gamepad.right_trigger_float(trigger_states['right'])

                virtual_gamepad.update()
                last_update_time = current_time

            except Exception as e:
                print(f"虚拟手柄更新错误: {e}")

        time.sleep(0.001)

# 启动高速更新线程
update_thread = threading.Thread(target=update_virtual_gamepad, daemon=True)
update_thread.start()

# 检查pyautogui可用性
try:
    import pyautogui
    USE_PYAUTOGUI = True
    print("使用pyautogui进行键盘模拟")
except ImportError:
    USE_PYAUTOGUI = False
    print("pyautogui未安装，使用pygame事件模拟")
    print("安装pyautogui: pip install pyautogui")

# 打印配置信息
print_configuration_info(joystick_optimizer)

try:
    print(f"\n🎮 修正版一致性优先摇杆映射已启动（{UPDATE_RATE}Hz 更新率）")
    print("✅ 物理行程一致性优化已启用")
    
    # 显示详细配置
    for stick in ['left', 'right']:
        mode = CONSISTENCY_MODE[stick]
        stick_name = "左摇杆" if stick == 'left' else "右摇杆"
        mode_desc = "一致性优先" if mode == 'global_min' else "传统独立"
        print(f"{stick_name}: {mode_desc}模式")
    
    # 显示死区配置
    left_config = DEADZONE_CONFIG['left']
    right_config = DEADZONE_CONFIG['right']
    print(f"\n左摇杆死区: {left_config['deadzone']:.3f}, 外环: {left_config['outer_threshold']:.2f}")
    print(f"右摇杆死区: {right_config['deadzone']:.3f}, 外环: {right_config['outer_threshold']:.2f}")
    
    # 显示方形死区状态
    left_status = "开启" if SQUARE_DEADZONE_SWITCH['left_stick'] else "关闭"
    right_status = "开启" if SQUARE_DEADZONE_SWITCH['right_stick'] else "关闭"
    print(f"左摇杆方形死区: {left_status}")
    print(f"右摇杆方形死区: {right_status}")
    
    # 显示方形映射强度
    left_strength = SQUARE_MAPPING_STRENGTH['left_stick']
    right_strength = SQUARE_MAPPING_STRENGTH['right_stick']
    print(f"左摇杆方形映射: {left_strength:.1f}")
    print(f"右摇杆方形映射: {right_strength:.1f}")
    
    # 显示输出增幅状态
    print(f"左摇杆输出增幅: {OUTPUT_AMPLIFIER['left_stick']:.1f}x")
    print(f"右摇杆输出增幅: {OUTPUT_AMPLIFIER['right_stick']:.1f}x")
    
    print("\n💡 优势: 消除眩晕感 ✓ 保护肌肉记忆 ✓ 转向加速度一致 ✓")
    print("扳机按钮: ZL=按钮13, ZR=按钮5")
    
    # 打印特殊按钮配置
    for btn_id, config in SPECIAL_BUTTONS.items():
        print(f"按钮{btn_id}: {config['description']}")

    while True:
        pygame.event.pump()

        # 处理所有按钮
        num_buttons = min(joystick.get_numbuttons(), 25)
        for i in range(num_buttons):
            try:
                current_state = bool(joystick.get_button(i))
            except:
                current_state = False

            if current_state != button_states[i]:
                button_name = PHYSICAL_TO_NAME.get(i, f"Btn{i}")

                # 特殊按钮处理
                if i in SPECIAL_BUTTONS:
                    config = SPECIAL_BUTTONS[i]
                    keys = config['keys']  # 获取键列表
                    
                    if current_state:
                        if USE_PYAUTOGUI:
                            # 按下所有键
                            for key in keys:
                                pyautogui.keyDown(key)
                        else:
                            # pygame处理
                            for key in keys:
                                try:
                                    key_code = getattr(pygame, f"K_{key.upper()}")
                                    key_event = pygame.event.Event(pygame.KEYDOWN, key=key_code)
                                    pygame.event.post(key_event)
                                except AttributeError:
                                    print(f"无法识别的键: {key}")
                        
                        key_names = '+'.join(keys).upper()
                        print(f"按下: {button_name} -> 键盘{key_names}键按下")
                    else:
                        if USE_PYAUTOGUI:
                            # 释放所有键（反向顺序）
                            for key in reversed(keys):
                                pyautogui.keyUp(key)
                        else:
                            # pygame处理
                            for key in reversed(keys):
                                try:
                                    key_code = getattr(pygame, f"K_{key.upper()}")
                                    key_event = pygame.event.Event(pygame.KEYUP, key=key_code)
                                    pygame.event.post(key_event)
                                except AttributeError:
                                    print(f"无法识别的键: {key}")
                        
                        key_names = '+'.join(keys).upper()
                        print(f"释放: {button_name} -> 键盘{key_names}键释放")
                    
                    button_states[i] = current_state
                    continue

                # 普通按钮处理
                if i in PHYSICAL_TO_XBOX:
                    target = PHYSICAL_TO_XBOX[i]

                    if isinstance(target, XUSB_BUTTON):
                        if current_state:
                            virtual_gamepad.press_button(target)
                            print(f"按下: {button_name}")
                        else:
                            virtual_gamepad.release_button(target)
                            print(f"释放: {button_name}")

                    elif isinstance(target, str) and target in ['left_trigger', 'right_trigger']:
                        if current_state:
                            print(f"按下扳机: {button_name}")
                        else:
                            print(f"释放扳机: {button_name}")

                button_states[i] = current_state

        # 处理pygame事件队列
        if not USE_PYAUTOGUI:
            for event in pygame.event.get():
                if event.type in (pygame.KEYDOWN, pygame.KEYUP):
                    pass

        # 处理扳机按钮状态
        process_trigger_buttons()

        # 处理摇杆
        process_joysticks_optimized(joystick)

        time.sleep(0.001)

except KeyboardInterrupt:
    virtual_gamepad.reset()
    virtual_gamepad.update()
    pygame.quit()
    print("\n🎮 程序已退出，感谢使用修正版一致性优先摇杆映射！")