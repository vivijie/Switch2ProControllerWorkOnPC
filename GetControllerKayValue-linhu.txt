import pygame
import time
import math

# Initialize
pygame.init()
pygame.joystick.init()

# Create window
screen_width, screen_height = 800, 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Advanced Gamepad Tester with Visual Sticks")
font = pygame.font.Font(None, 22)
small_font = pygame.font.Font(None, 18)

joystick_count = pygame.joystick.get_count()
if joystick_count == 0:
    print("No gamepad detected!")
    exit()

joysticks = []
for i in range(joystick_count):
    joystick = pygame.joystick.Joystick(i)
    joystick.init()
    joysticks.append(joystick)

print("Gamepad testing started...")

# Colors
BACKGROUND = (30, 30, 40)
TEXT = (255, 255, 255)
ACTIVE = (0, 255, 0)
INACTIVE = (150, 150, 150)
STICK_BG = (60, 60, 80)
STICK_CIRCLE = (80, 80, 100)
STICK_DOT = (0, 200, 255)
AXIS_TEXT = (200, 200, 255)

button_states = []
axis_states = []
hat_states = []

for joystick in joysticks:
    button_states.append([False] * joystick.get_numbuttons())
    axis_states.append([0.0] * joystick.get_numaxes())
    hat_states.append([(0, 0)] * joystick.get_numhats())

running = True
clock = pygame.time.Clock()

def draw_stick(surface, x, y, radius, stick_x, stick_y, label):
    """Draw a visual representation of a joystick"""
    # Draw background circle
    pygame.draw.circle(surface, STICK_BG, (x, y), radius)
    pygame.draw.circle(surface, STICK_CIRCLE, (x, y), radius, 2)
    
    # Draw crosshair
    pygame.draw.line(surface, (100, 100, 120), (x - radius, y), (x + radius, y), 1)
    pygame.draw.line(surface, (100, 100, 120), (x, y - radius), (x, y + radius), 1)
    
    # Calculate stick position
    dot_x = x + stick_x * radius * 0.9
    dot_y = y + stick_y * radius * 0.9
    
    # Draw stick dot
    pygame.draw.circle(surface, STICK_DOT, (int(dot_x), int(dot_y)), 8)
    pygame.draw.circle(surface, (255, 255, 255), (int(dot_x), int(dot_y)), 8, 1)
    
    # Draw label
    text = small_font.render(label, True, TEXT)
    surface.blit(text, (x - text.get_width() // 2, y + radius + 5))
    
    # Draw values
    values_text = small_font.render(f"X: {stick_x:.2f} Y: {stick_y:.2f}", True, AXIS_TEXT)
    surface.blit(values_text, (x - values_text.get_width() // 2, y + radius + 25))

def draw_trigger(surface, x, y, width, height, value, label):
    """Draw a visual representation of a trigger"""
    # Draw background
    pygame.draw.rect(surface, STICK_BG, (x, y, width, height))
    pygame.draw.rect(surface, STICK_CIRCLE, (x, y, width, height), 2)
    
    # Draw filled portion based on trigger value
    fill_height = int(height * value)
    pygame.draw.rect(surface, STICK_DOT, (x, y + height - fill_height, width, fill_height))
    
    # Draw label
    text = small_font.render(label, True, TEXT)
    surface.blit(text, (x + width // 2 - text.get_width() // 2, y - 20))
    
    # Draw value
    value_text = small_font.render(f"{value:.2f}", True, AXIS_TEXT)
    surface.blit(value_text, (x + width // 2 - value_text.get_width() // 2, y + height + 5))

def draw_hat(surface, x, y, size, hat_x, hat_y, label):
    """Draw a visual representation of a hat/d-pad"""
    # Draw background
    pygame.draw.rect(surface, STICK_BG, (x - size//2, y - size//2, size, size))
    pygame.draw.rect(surface, STICK_CIRCLE, (x - size//2, y - size//2, size, size), 2)
    
    # Draw crosshair
    pygame.draw.line(surface, (100, 100, 120), (x - size//2, y), (x + size//2, y), 1)
    pygame.draw.line(surface, (100, 100, 120), (x, y - size//2), (x, y + size//2), 1)
    
    if hat_x != 0 or hat_y != 0:
        # Calculate dot position
        dot_x = x + hat_x * size * 0.3
        dot_y = y + hat_y * size * 0.3
        
        # Draw direction dot
        pygame.draw.circle(surface, ACTIVE, (int(dot_x), int(dot_y)), 6)
    
    # Draw label
    text = small_font.render(label, True, TEXT)
    surface.blit(text, (x - text.get_width() // 2, y + size//2 + 15))
    
    # Draw values
    values_text = small_font.render(f"({hat_x}, {hat_y})", True, AXIS_TEXT)
    surface.blit(values_text, (x - values_text.get_width() // 2, y + size//2 + 35))

try:
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    running = False
        
        screen.fill(BACKGROUND)
        
        # Title
        title = font.render("ADVANCED GAMEPAD TESTER WITH VISUAL STICKS", True, (255, 255, 0))
        screen.blit(title, (20, 15))
        
        # Instructions
        instr = small_font.render("ESC to exit | Move sticks and press buttons to test", True, (200, 200, 200))
        screen.blit(instr, (20, 45))
        
        y_pos = 70
        
        for joy_idx, joystick in enumerate(joysticks):
            # Gamepad info
            gp_text = font.render(f"Gamepad {joy_idx}: {joystick.get_name()}", True, (100, 200, 255))
            screen.blit(gp_text, (20, y_pos))
            y_pos += 30
            
            # Buttons section
            btn_header = font.render("BUTTONS:", True, (255, 200, 100))
            screen.blit(btn_header, (20, y_pos))
            y_pos += 25
            
            btn_y = y_pos
            btn_x = 20
            
            for i in range(joystick.get_numbuttons()):
                current_state = joystick.get_button(i)
                color = ACTIVE if current_state else INACTIVE
                
                btn_text = small_font.render(f"Btn{i}", True, color)
                screen.blit(btn_text, (btn_x, btn_y))
                
                if current_state and not button_states[joy_idx][i]:
                    print(f"Gamepad {joy_idx} - Button {i} pressed")
                
                button_states[joy_idx][i] = current_state
                btn_x += 50
                
                if btn_x > 300:
                    btn_x = 20
                    btn_y += 20
            
            y_pos = btn_y + 30
            
            # Visual controls section (right side)
            vis_x = 400
            vis_y = 100 + joy_idx * 180
            
            # Left stick
            if joystick.get_numaxes() >= 2:
                left_x = joystick.get_axis(0)
                left_y = joystick.get_axis(1)
                draw_stick(screen, vis_x, vis_y, 40, left_x, left_y, "Left Stick")
            
            # Right stick
            if joystick.get_numaxes() >= 4:
                right_x = joystick.get_axis(2)
                right_y = joystick.get_axis(3)
                draw_stick(screen, vis_x + 120, vis_y, 40, right_x, right_y, "Right Stick")
            
            # Triggers
            if joystick.get_numaxes() >= 6:
                left_trigger = (joystick.get_axis(4) + 1) / 2  # Convert from [-1,1] to [0,1]
                right_trigger = (joystick.get_axis(5) + 1) / 2
                draw_trigger(screen, vis_x + 240, vis_y - 20, 20, 60, left_trigger, "L2")
                draw_trigger(screen, vis_x + 270, vis_y - 20, 20, 60, right_trigger, "R2")
            
            # Hats/D-pad
            if joystick.get_numhats() > 0:
                hat_x, hat_y = joystick.get_hat(0)
                draw_hat(screen, vis_x + 350, vis_y, 50, hat_x, hat_y, "D-Pad")
            
            # Raw axis values (text)
            axes_text = font.render("RAW AXIS VALUES:", True, (255, 200, 100))
            screen.blit(axes_text, (20, y_pos))
            y_pos += 25
            
            for i in range(joystick.get_numaxes()):
                axis_val = joystick.get_axis(i)
                axis_text = small_font.render(f"Axis {i}: {axis_val:8.4f}", True, AXIS_TEXT)
                screen.blit(axis_text, (20, y_pos))
                y_pos += 20
            
            # Hats values
            if joystick.get_numhats() > 0:
                hats_text = font.render("HAT VALUES:", True, (255, 200, 100))
                screen.blit(hats_text, (20, y_pos))
                y_pos += 25
                
                for i in range(joystick.get_numhats()):
                    hat_val = joystick.get_hat(i)
                    hat_text = small_font.render(f"Hat {i}: {hat_val}", True, (255, 200, 100))
                    screen.blit(hat_text, (20, y_pos))
                    y_pos += 20
            
            y_pos += 20
        
        # Footer
        footer = small_font.render("Move joysticks to see visual feedback | Press buttons to see them light up", True, (180, 180, 180))
        screen.blit(footer, (20, screen_height - 30))
        
        pygame.display.flip()
        clock.tick(60)

except KeyboardInterrupt:
    pass

pygame.quit()
print("Testing completed")